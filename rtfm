#!/usr/bin/python      
# -*- coding: utf-8 -*-
# RTFM written by Hylix (hylixx@gmail.com) under GPL v2

import commands
import urllib
import sys


# Config
max_result = 4 # 0 for no limit

class color:
    def __init__(self):
        self.black='\033[0;30m'
        self.blue='\033[0;34m'
        self.green='\033[0;32m'
        self.cyan='\033[0;36m'
        self.red='\033[0;31m'
        self.purple='\033[0;35m'
        self.brown='\033[0;33m'
        self.lightgray='\033[0;37m'
        self.darkgray='\033[1;30m'
        self.lightblue='\033[1;34m'
        self.lightgreen='\033[1;32m'
        self.lightcyan='\033[1;36m'
        self.lightred='\033[1;31m'
        self.lightpurple='\033[1;35m'
        self.yellow='\033[1;33m'
        self.white='\033[1;37m'
        self.nc='\033[0m'

class link:
    def __init__(self):
        self.link = ""
        self.title = ""
        self.occ_nbr = ""

    def parse_wikifr_line(self, line):
        self.link = "http://wiki.archlinux.fr"+line[line.find("<a href=")+9:line.find('" class="wikilink1"')].replace("&amp;","&")
        self.link = self.link[:self.link.find("?")]
        self.title = line[line.find("title=")+7:line.find('</a>')]
        self.title = self.title[:self.title.find('">')]
        self.occ_nbr =  line[line.find('search_cnt">')+12:line.find(' occurrences')]
    
    def parse_wikiorg_line(self, line):
        self.link = "http://wiki.archlinux.org"+line[line.find("<a href=")+9:line.find('" title="')].replace("&amp;","&")
        self.title = line[line.find("title=")+7:line.find('</a>')]
        self.title = self.title[:self.title.find('">')]

    def parse_scroogle_line(self, line):
        self.link = line[line.find(". <A Href")+11:line.find('">')]
        self.title = line[line.find('">')+2:line.find("</a>")].replace("<b>","").replace("</b>","")

def terminal_width():
    import struct, fcntl, termios
    s = struct.pack('HHHH', 0, 0, 0, 0)
    x = fcntl.ioctl(1, termios.TIOCGWINSZ, s)
    width = struct.unpack('HHHH', x)[1]
    height = struct.unpack('HHHH', x)[0]
    return (width, height)

def srange(i,step):
    r = 0
    while r < i:
        yield r
        r += step

def drange(start,i,step):
    r = start
    while r < i:
        yield r
        r += step

def man_search(arg):
    man_pages = commands.getoutput("man -k %s"% arg)
    return man_pages.split("\n")

def web_search(arg, website):
    lnk = link()

    if website == "fr":
        search_url = "http://wiki.archlinux.fr/?do=search\&id=%s"%arg
        kw = """class="wikilink1\""""
        parse_func = lnk.parse_wikifr_line
    elif website == "scroogle":
        search_url = "http://www.scroogle.org/cgi-bin/nbbw.cgi?q=%s"%arg
        kw = """<A Href=\""""
        parse_func = lnk.parse_scroogle_line
    elif website == "org":
        search_url = "http://wiki.archlinux.org/index.php/Special:Search?search=%s&fulltext=Search"%arg
        kw = """class='searchresult"""
        parse_func = lnk.parse_wikiorg_line

    page = urllib.urlopen(search_url)
    page = page.readlines()
    link_lines = []

    for i in page:
        if kw in i:
             to_pass = False
             if website == "scroogle" and "home page</A> &nbsp; &nbsp;" in i or "<font color=#008000>how to make a bookmark</font></A>" in i or "Back to search page</A>" in i:
                 to_pass = True
             if website == "fr" and "Pas de réponse." in i:
                 to_pass = True
             if website == "org" and "No page text matches" in i:
                 to_pass = True
             if not to_pass:
                 parse_func(i)
                 link_lines.append((lnk.title,lnk.link,lnk.occ_nbr))

    return (search_url, link_lines)

def get_pkgman():
    if "yaourt" in commands.getoutput("ls /usr/bin/yaourt"):
        return "yaourt --nocolor --textonly"
    else:
        return "pacman"

def get_repos():
    repos = commands.getoutput("grep '\[.*\]' /etc/pacman.conf").split("\n")
    clone = []
    for i in range(len(repos)):
        if "[options]" not in repos[i] and repos[i][0] != "#":
            clone.append(repos[i][1:-1]+"/")
    clone.append("aur/")
    return clone
    
def pkg_search(arg):
    pkgman = get_pkgman()
    pkglist = commands.getoutput("%s -Ss %s" % (pkgman,arg))
    pkglist = pkglist.split("\n")
    del pkglist[len(pkglist)-1]
    repos = get_repos() 
    left = []
    ret = []
    pkg_name = ""
    pkg_desc = ""
    for i in range(len(pkglist)):
        for j in repos:
            if j in pkglist[i]:
                left.append(i)
    for i in range(len(left)):
        pkg_name = pkglist[left[i]]
        pkg_desc = ""
        if i != len(left)-1:
            z = (left[i+1]-left[i])
        else: 
            z = 0
        for j in range(z-1):
             pkg_desc += pkglist[left[i]+j+1].replace('\n',' ')[4:]
        if i == len(left)-1:
            pkg_desc = pkglist[len(pkglist)-1][4:] 
        ret.append((pkg_name,pkg_desc))
    return ret

def get_end_iter(var):
    if len(var) > max_result:
        end = max_result
    else:
        end = len(var)
    return end

def usage():
    print 
    #print "========================= RTFM ========================="
    print "Se documenter sur tout en général ? Voila qui paraît ambitieux. Il vaudrait mieux préciser un peu."
    #print "========================================================"
    print 

#####################################################################################################################
# Begin of the program                                                                                              #
#####################################################################################################################
if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage() 
    else:
        colors = color()
        args = [sys.argv[i+1] for i in range(len(sys.argv)-1)]
        argp = ""
        for i in args:
            argp += i+" "
        argp = argp[:-1]
        
        top_hyph = [] 
        bot_hyph = ""

        for i in range(terminal_width()[0]):
            top_hyph.append("=")
            bot_hyph += "="
        word = " Documentons-nous sur %s. "%argp
        count = 0

        if len(word) > terminal_width()[0]:
            hyph_clone = word
        else:    
            for i in drange(-1*(len(word)/2),(len(word)/2)+(len(word)%2),1):
                top_hyph[(len(top_hyph)/2)+i] = word[count] 
                count += 1
            hyph_clone = ""
            for i in top_hyph:
                hyph_clone += i

        print 
        print colors.green+hyph_clone+colors.nc
        print

        print""+colors.lightred+"::"+colors.lightgreen+" Quelques pages man..."+colors.nc
        man = man_search(argp)
        if len(man) < 1 or man[0] == "":
            print "\t "+colors.yellow+"⇒"+colors.nc+"Pas de pages dans le manuel"
        else:
            for i in range(get_end_iter(man)):
                print "\t"+colors.yellow+"⇒"+colors.nc+"%s"%man[i]
        print

        print ""+colors.lightred+"::"+colors.lightgreen+" Wiki francophone :"+colors.nc
        wikifr = web_search(argp.replace(" ","+"),"fr")
        if len(wikifr[1]) < 1:
            print "\t "+colors.yellow+"⇒"+colors.nc+" Rien dans le wiki fr"
        else:
            for i in range(get_end_iter(wikifr[1])):
                print "\t "+colors.yellow+"⇒"+colors.nc+"%s(%s)"%(wikifr[1][i][0],wikifr[1][i][2])
                print "\t    %s"%wikifr[1][i][1]
            print "\t "+colors.yellow+"⇒"+colors.nc+" Plus:"
            print "\t    %s"%wikifr[0]
        print

        print ""+colors.lightred+"::"+colors.lightgreen+" Wiki anglophone :"+colors.nc
        wikiorg = web_search(argp.replace(" ","+"),"org")
        if len(wikiorg[1]) < 1:
            print "\t "+colors.yellow+"⇒"+colors.nc+" Rien dans le wiki .org"
        else:
            for i in range(get_end_iter(wikiorg[1])):
                print "\t "+colors.yellow+"⇒"+colors.nc+"%s"%wikiorg[1][i][0]
                print "\t    %s"%wikiorg[1][i][1]
            print "\t "+colors.yellow+"⇒"+colors.nc+"Plus"    
            print "\t   "+colors.yellow+"⇒"+colors.nc+"%s"%wikiorg[0]
        print

        print ""+colors.lightred+"::"+colors.lightgreen+" Sur le Web :"+colors.nc
        web = web_search(argp.replace(" ","+"),"scroogle")
        if len(web[1]) < 1:
            print "\t "+colors.yellow+"⇒"+colors.nc+"Rien sur le web"
        else:
            for i in range(get_end_iter(web[1])):
                print "\t "+colors.yellow+"⇒"+colors.nc+"%s"%web[1][i][0]
                print "\t    %s"%web[1][i][1]
            print "\t "+colors.yellow+"⇒"+colors.nc+"Plus"
            print "\t   %s"%web[0]
        print

        print ""+colors.lightred+"::"+colors.lightgreen+" Quelques paquets..."+colors.nc
        pkg = pkg_search(argp)
        if len(pkg) < 1:
            print "\t "+colors.yellow+"⇒"+colors.nc+"Aucun paquet trouvé"
        else:
            for i in range(get_end_iter(pkg)):
                print "\t "+colors.yellow+"⇒"+colors.nc+"%s"%pkg[i][0]
                print "\t    %s"%pkg[i][1]
        
        print
        print colors.green+bot_hyph+colors.nc 
        print
